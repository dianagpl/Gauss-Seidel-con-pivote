import numpy as np
import sys 

def read_inputs(text_basis):
    a_temp, b_temp = text_basis.strip().split('=')
    b_temp = eval(b_temp.strip(' '))
    a_temp = [eval(i) for i in a_temp.split()]
    return a_temp, b_temp
def lectura(path):
    b = []
    A = []
    with open(path, 'r') as f:
        flag = 0
        for line in f:
            if line.strip() != 'I':
                pass
            else:
                flag=1
                continue
            if line == 'F':
                break
            if flag == 1:
                aux_1, aux_2 = read_inputs(line)
              
                A.append(aux_1)
                b.append(aux_2)
    
    return A, b

ruta = r'''C:\Users\diana\OneDrive\Documentos\sistema de ecuaciones1.txt'''
A, b= lectura(ruta)



if len(A)!=len(A[0]):
    print("La matriz no es cuadrada, no se puede resolver. \nSu tamaño es:")
    print(len(A),"X",len(A[0]))
    sys.exit()

A_np = np.array(A)
b_np = np.array(b)

maxarray=[]
maxdiv=[]

#primer intercambio:
for i in range(len(A_np)):
    #máximo de cada ec.
    maxarray.append(max(A_np[i]))
    #elemento 0 entre máximo
    maxdiv.append(abs(A_np[i][0])/maxarray[i])
    #máximo de las divisiones
    y=np.where(max(maxdiv) == maxdiv)


    #intercambio de filas A
if len(y[0])==1:
    tmp = np.copy(A_np[y[0]])
    A_np[y[0]] = A_np[0]
    A_np[0] = tmp
    #intercambio de filas de b
    tmpb = np.copy(b_np[y[0]])
    b_np[y[0]] = b_np[0]
    b_np[0] = tmpb

#segundo intercambio:
maxarray2=[]
maxdiv2=[]
a_np1=np.delete(A_np, (0), axis=0)
a_nptemp=np.delete(a_np1, (0), axis=1)
for i in range(len(a_nptemp)):
    #máximo de cada ec.
    maxarray2.append(max(a_nptemp[i]))
    #elemento 1 entre máximo
    maxdiv2.append(abs(a_nptemp[i][0])/abs(maxarray2[i]))
    #máximo de las divisiones
    x=np.where(max(maxdiv2) == maxdiv2)

#intercambio de filas A (más uno)
if len(x[0])==1:
    tmp = np.copy(A_np[x[0]+1])
    A_np[x[0]+1] = A_np[1]
    A_np[1] = tmp
    #intercambio de filas de b
    tmpb = np.copy(b_np[x[0]+1])
    b_np[x[0]+1] = b_np[1]
    b_np[1] = tmpb




#tercer intercambio:
maxarray3=[]
maxdiv3=[]
a_np2=np.delete(A_np, (0,1), axis=0)

a_nptemp2=np.delete(a_np2, (0,1), axis=1)
for i in range(len(a_nptemp2)):
    #máximo de cada ec.
    maxarray3.append(max(a_nptemp2[i]))
    #elemento 2 entre máximo
    maxdiv3.append(abs(a_nptemp2[i][0])/abs(maxarray3[i]))
    #máximo de las divisiones
    z=np.where(max(maxdiv3) == maxdiv3)

#intercambio de filas A (más dos)
if len(z[0])==1:
    tmp = np.copy(A_np[z[0]+2])
    A_np[z[0]+2] = A_np[2]
    A_np[2] = tmp
    #intercambio de filas de b
    tmpb = np.copy(b_np[z[0]+2])
    b_np[z[0]+2] = b_np[2]
    b_np[2] = tmpb

def GaussSeidel2(A_np,b_np,umbral,iter_max):
    x_np = np.zeros(len(b_np)) 
    aux_np = np.ones(len(A_np))
       
    for ite in range(iter_max):
        for i in range(len(A_np)):
            aux_np[i] = 0.0
            x_np[i] = (b_np[i] - np.sum(x_np*aux_np*A_np[i,:]))/A_np[i][i]
            aux_np[i] = 1.0
        
        current_b = np.dot(A_np,x_np)
        error = np.sum(np.abs(current_b-b_np))
        
        if error < umbral:
            break
    return x_np
print("Con numpy:")    
print(GaussSeidel2(A_np, b_np, 0.00001, 10000))
